// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CryptoCoreClient is the client API for CryptoCore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CryptoCoreClient interface {
	Mine(ctx context.Context, in *MineRequest, opts ...grpc.CallOption) (*MineResponse, error)
	Validate(ctx context.Context, in *ValidateRequest, opts ...grpc.CallOption) (*ValidateResponse, error)
}

type cryptoCoreClient struct {
	cc grpc.ClientConnInterface
}

func NewCryptoCoreClient(cc grpc.ClientConnInterface) CryptoCoreClient {
	return &cryptoCoreClient{cc}
}

func (c *cryptoCoreClient) Mine(ctx context.Context, in *MineRequest, opts ...grpc.CallOption) (*MineResponse, error) {
	out := new(MineResponse)
	err := c.cc.Invoke(ctx, "/thourus.cryptocore.CryptoCore/Mine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cryptoCoreClient) Validate(ctx context.Context, in *ValidateRequest, opts ...grpc.CallOption) (*ValidateResponse, error) {
	out := new(ValidateResponse)
	err := c.cc.Invoke(ctx, "/thourus.cryptocore.CryptoCore/Validate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CryptoCoreServer is the server API for CryptoCore service.
// All implementations must embed UnimplementedCryptoCoreServer
// for forward compatibility
type CryptoCoreServer interface {
	Mine(context.Context, *MineRequest) (*MineResponse, error)
	Validate(context.Context, *ValidateRequest) (*ValidateResponse, error)
	mustEmbedUnimplementedCryptoCoreServer()
}

// UnimplementedCryptoCoreServer must be embedded to have forward compatible implementations.
type UnimplementedCryptoCoreServer struct {
}

func (UnimplementedCryptoCoreServer) Mine(context.Context, *MineRequest) (*MineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mine not implemented")
}
func (UnimplementedCryptoCoreServer) Validate(context.Context, *ValidateRequest) (*ValidateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Validate not implemented")
}
func (UnimplementedCryptoCoreServer) mustEmbedUnimplementedCryptoCoreServer() {}

// UnsafeCryptoCoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CryptoCoreServer will
// result in compilation errors.
type UnsafeCryptoCoreServer interface {
	mustEmbedUnimplementedCryptoCoreServer()
}

func RegisterCryptoCoreServer(s grpc.ServiceRegistrar, srv CryptoCoreServer) {
	s.RegisterService(&CryptoCore_ServiceDesc, srv)
}

func _CryptoCore_Mine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptoCoreServer).Mine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thourus.cryptocore.CryptoCore/Mine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptoCoreServer).Mine(ctx, req.(*MineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CryptoCore_Validate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptoCoreServer).Validate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thourus.cryptocore.CryptoCore/Validate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptoCoreServer).Validate(ctx, req.(*ValidateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CryptoCore_ServiceDesc is the grpc.ServiceDesc for CryptoCore service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CryptoCore_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "thourus.cryptocore.CryptoCore",
	HandlerType: (*CryptoCoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Mine",
			Handler:    _CryptoCore_Mine_Handler,
		},
		{
			MethodName: "Validate",
			Handler:    _CryptoCore_Validate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "infrastructure/grpc/proto/cryptocore.proto",
}
